{
	// Place your reduxapp-mod workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Duck Pattern feature duck": {
		"scope": "javascript,typescript",
		"prefix": "dpbd",
		"body": [
			"// Action Types",
			"export const Types = {",
			"    ${1:REQUEST:} ${2:'FEATURE_REQUEST',}",
			"};",
			"",
			"// Reducer",
			"const INITIAL_STATE = {",
			"   ${3:stateProp:} ${4:value}",
			"}",
			"",
			"const reducer = (state = INITIAL_STATE, action) => {",
			"    switch (action.type) {",
			"        default:",
			"            return state;",
			"            break;",
			"    }",
			"}",
			"export default reducer;",
			"",
			"// Action Creators",
			"export const Creators = {",
			"    ${5:featureRequest:} () => ({",
			"         type: ${6:Types.REQUEST,}",
			"    })",
			"}"
		],
		"description": "Duck Pattern duck template"
	},
	"Duck Pattern redux combine reducers": {
		"scope": "javascript,typescript",
		"prefix": "dpcr",
		"body": [
			"import { combineReducers } from 'redux';",
			"",
			"import ${2:feature} from ${1:'./feature'};",
			"",
			"export default combineReducers({",
			"    $2,",
			"})",
		],
		"description": "Duck Pattern reducer combiner"
	},
	"Saga rootSaga template": {
		"scope": "javascript,typescript",
		"prefix": "sgrs",
		"body": [
			"import { all, takeLatest, call, put, select } from 'redux-saga/effects';",
			"",
			"import {Creators as ${1:FeatureActions}, Types as ${2:FeatureTypes} } from ${3:'featureduck'}",
			"",
			"function* ${4:feature}(action) {",
			"    //try {",
			"    //    const { data } = action.payload;",
			"    //    yield call(api.get, `/url/data);`",
			"    //    yield put(FeatureActions.success(data);",
			"    //catch (error) {",
			"    //    yield put(FeatureActions.failure()",
			"    //}",
			"}",
			"",
			"export default function* rootSaga() {",
			"    return yield all([",
			"        takeLatest($2.REQUEST, $4),",
			"    ])",
			"}",
		],
		"description": "Saga rootSaga template"
	},

}